@page "/users"
@using MyMessenger.Application.DTO.UserDTOs
@using MyMessenger.Application.DTO
@using MyMessenger.Maui.Services
@using MyMessenger.Maui.Components.Pages.ParametersPages
@using BlazorPagination
@inject UserService userService

<h1>Users</h1>
@if (IsLoaded) {
    <button @onclick="OpenPopup">Parameters</button>

    <SfGrid DataSource="@UsersList">
        <GridColumns>
            <GridColumn Field="@nameof(UserDTO.Name)" HeaderText="Name"></GridColumn>
            <GridColumn Field="@nameof(UserDTO.UserName)" HeaderText="UserName"></GridColumn>
            <GridColumn Field="@nameof(UserDTO.Email)" HeaderText="Email"></GridColumn>
            <GridColumn Field="@nameof(UserDTO.PhoneNumber)" HeaderText="Phone"></GridColumn>
        </GridColumns>
    </SfGrid>
    <BlazorPager CurrentPage="@currentPage"
                 PageCount="@numberOfPages"
                 OnPageChanged="(async x => { currentPage = x; ChangePage(); })"
                 ShowFirstLast="false"
                 ShowPageNumbers="true"
    VisiblePages=pageSize />

    if (isWindowVisible)
    {
        <GenericParameters Columns="@Columns" CurrentPage="@CurrentPage" OnSave="@SaveChanges" OnClose="@ClosePopup"></GenericParameters>
    }
} 
else {
    <br>
    <h3>Loading...</h3>
}

@code {
    private IEnumerable<UserDTO> UsersList;
    private AllDataRetrievalParametersDTO CurrentPage;
    private List<string> Columns = new List<string> { "Name", "UserName", "Email", "PhoneNumber" };
    private bool isWindowVisible = false;
    private int numberOfPages;
    private int currentPage;
    private int pageSize;
    private bool IsLoaded { get; set; } = false;

    protected override void OnInitialized()
    {
        numberOfPages = 1;
        currentPage = 1;
        pageSize = 10;
        CurrentPage = new AllDataRetrievalParametersDTO() { PageNumber = currentPage, PageSize = pageSize, Sort = new Dictionary<string, bool>() { { "Name", false } }, Subs = "" };
        GetAllUsers();
        base.OnInitialized();
        IsLoaded = true;
    }
    private void ChangePage()
    {
        CurrentPage.PageNumber = currentPage;
        GetAllUsers();
    }
    private async void GetAllUsers()
    {
        DataForGridDTO<UserDTO> newdata = await userService.GetAllUsers(CurrentPage);
        UsersList = newdata.Data;
        numberOfPages = newdata.NumberOfPages;
        StateHasChanged();
    }

    // Parameters
    void SaveChanges()
    {
        GetAllUsers();
    }
    void OpenPopup()
    {
        isWindowVisible = true;
    }
    void ClosePopup()
    {
        isWindowVisible = false;
    }
}
