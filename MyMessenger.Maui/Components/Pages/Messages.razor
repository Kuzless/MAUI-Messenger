@page "/messages"
@using MyMessenger.Maui.Models
@using MyMessenger.Maui.Services
@using BlazorPagination
@using MyMessenger.Maui.Components.Pages.ParametersPages
@using MyMessenger.Maui.Services.PageService
@inject MessageService messageService

<div class="card" style="margin-top:2rem;">
    <h1 class="text-accent">Your Messages</h1>
    @if (IsLoaded)
    {
        <div style="display:flex;justify-content:flex-end;gap:1rem;margin-bottom:1rem;">
            <button class="btn-main" style="width:180px;" @onclick="messagePageService.OpenPopup">Parameters</button>
        </div>

        <SfGrid DataSource="@messagePageService.MessagesList">
            <GridColumns>
                <GridColumn Field="@nameof(MessageDTO.Text)" HeaderText="Message"></GridColumn>
                <GridColumn Field="@nameof(MessageDTO.DateTime)" HeaderText="Time"></GridColumn>
                <GridColumn>
                    <Template>
                        <button class="btn-main" @onclick="() => messagePageService.DeleteMessage((MessageDTO)context)">Delete</button>
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
        <BlazorPager CurrentPage="@messagePageService.currentPage"
                     PageCount="@messagePageService.numberOfPages"
                     OnPageChanged="(async x => { messagePageService.currentPage = x; messagePageService.ChangePage(); })"
                     ShowFirstLast="false"
                     ShowPageNumbers="true"
                     VisiblePages=messagePageService.pageSize />
        if (messagePageService.isWindowVisible)
        {
            <GenericParameters Columns="@messagePageService.Columns" CurrentPage="@messagePageService.CurrentPage" OnSave="@messagePageService.SaveChanges" OnClose="@messagePageService.ClosePopup"></GenericParameters>
        }
    }
    else
    {
        <br>
        <h3 class="muted">Loading...</h3>
    }
</div>

@code {
    [Inject] private MessagePageService messagePageService { get; set; }
    private bool IsLoaded { get; set; } = false;

    protected override void OnInitialized()
    {
        messagePageService.OnDataChanged += Refresh;
        base.OnInitialized();
        IsLoaded = true;
    }
    private void Refresh()
    {
        StateHasChanged();
    }
}

