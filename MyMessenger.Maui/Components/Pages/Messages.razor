@page "/messages"
@using MyMessenger.Application.DTO.MessagesDTOs
@using MyMessenger.Application.DTO
@using MyMessenger.Maui.Services
@using BlazorPagination
@using MyMessenger.Maui.Components.Pages.ParametersPages
@inject MessageService messageService

<h1>Your Messages</h1>
@if (IsLoaded)
{
    <button @onclick="OpenPopup">Parameters</button>

    <SfGrid DataSource="@MessagesList">
        <GridColumns>
            <GridColumn Field="@nameof(MessageDTO.Text)" HeaderText="Message"></GridColumn>
            <GridColumn Field="@nameof(MessageDTO.DateTime)" HeaderText="Time"></GridColumn>
            <GridColumn>
                <Template>
                    <button @onclick="() => DeleteMessage((MessageDTO)context)">Delete</button>
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
    <BlazorPager CurrentPage="@currentPage"
                 PageCount="@numberOfPages"
                 OnPageChanged="(async x => { currentPage = x; ChangePage(); })"
                 ShowFirstLast="false"
                 ShowPageNumbers="true"
                 VisiblePages=pageSize />
    if (isWindowVisible)
    {
        <GenericParameters Columns="@Columns" CurrentPage="@CurrentPage" OnSave="@SaveChanges" OnClose="@ClosePopup"></GenericParameters>
    }
}
else
{
    <br>
    <h3>Loading...</h3>
}

@code {
    private IEnumerable<MessageDTO> MessagesList;
    private AllDataRetrievalParametersDTO CurrentPage;
    private List<string> Columns = new List<string> { "Text", "DateTime" };
    private bool isWindowVisible = false;
    private int numberOfPages;
    private int currentPage;
    private int pageSize;
    string newMessage = "";
    private bool IsLoaded { get; set; } = false;

    protected override void OnInitialized()
    {
        numberOfPages = 1;
        currentPage = 1;
        pageSize = 10;
        CurrentPage = new AllDataRetrievalParametersDTO() { PageNumber = currentPage, PageSize = pageSize, Sort = new Dictionary<string, bool>() { { "Text", false } }, Subs = ""};
        GetAllMessages();
        base.OnInitialized();
        IsLoaded = true;
    }
    private void ChangePage()
    {
        CurrentPage.PageNumber = currentPage;
        GetAllMessages();
    }
    private async void GetAllMessages()
    {
        DataForGridDTO<MessageDTO> newdata = await messageService.GetAllMessages(CurrentPage);
        MessagesList = newdata.Data;
        numberOfPages = newdata.NumberOfPages;
        StateHasChanged();
    }
    void ChangeParametersVisibility()
    {
        isWindowVisible = !isWindowVisible;
    }
    private async void DeleteMessage(MessageDTO message)
    {
        await messageService.DeleteMessage(message.Id);
        GetAllMessages();
    }

    //Parameters
    void SaveChanges()
    {
        GetAllMessages();
    }
    void OpenPopup()
    {
        isWindowVisible = true;
    }
    void ClosePopup()
    {
        isWindowVisible = false;
    }
}

