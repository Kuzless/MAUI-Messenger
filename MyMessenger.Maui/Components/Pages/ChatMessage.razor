@page "/chatmessages/{id}"
@using MyMessenger.Application.DTO.MessagesDTOs
@using MyMessenger.Application.DTO
@using Microsoft.AspNetCore.SignalR.Client
@using MyMessenger.Maui.Services
@using Blazored.LocalStorage
@inject ILocalStorageService storage
@inject MessageService messageService

<h1>Messages</h1>
@if (IsLoaded)
{
    <SfGrid DataSource="@MessagesList" @ref="grid">
        <GridColumns>
            <GridColumn Field="@nameof(MessageDTO.Name)" HeaderText="Sender"></GridColumn>
            <GridColumn Field="@nameof(MessageDTO.Text)" HeaderText="Message"></GridColumn>
            <GridColumn Field="@nameof(MessageDTO.DateTime)" HeaderText="Time"></GridColumn>
        </GridColumns>
    </SfGrid>

    <button @onclick="ChangeAddMessageVisibility">Add</button>

    @if (showAddMenu)
    {
        <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px;">
            <label for="chatName">Text:</label>
            <input type="text" id="messageText" @bind="newMessage" required />
            <div style="margin-top: 10px;">
                <button @onclick="AddMessage">Save</button>
            </div>
        </div>
    }
}
else
{
    <br>
    <h3>Loading...</h3>
}

@code {
    [Parameter]
    public string id { get; set; }
    private int ChatId { get; set; }
    private HubConnection hubConnection;
    private SfGrid<MessageDTO> grid;
    private List<MessageDTO> MessagesList = new List<MessageDTO>();
    private AllDataRetrievalParametersDTO CurrentPage;
    private bool isWindowVisible = false;
    bool showAddMenu = false;
    string newMessage = "";
    private bool IsLoaded { get; set; } = false;

    protected override async void OnInitialized()
    {
        // Hub Connection

        var token = (await storage.GetItemAsStringAsync("accessToken")).Replace("\"", "");
        hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:7081/chathub", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            }).Build();

        hubConnection.On<MessageDTO>("ReceiveMessage", async (receivedMessage) =>
        {
            MessagesList.Add(receivedMessage);
            await grid.Refresh();
        });
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", id);
        
        //
        ChatId = Convert.ToInt32(id);
        CurrentPage = new AllDataRetrievalParametersDTO() { PageNumber = 1, PageSize = 9999, Sort = new Dictionary<string, bool>(), Subs = "" };
        GetAllMessages(CurrentPage);
        base.OnInitialized();
        IsLoaded = true;
    }
    private async void GetAllMessages(AllDataRetrievalParametersDTO data)
    {
        CurrentPage = data;
        DataForGridDTO<MessageDTO> newdata = await messageService.GetAllMessages(CurrentPage, ChatId);
        MessagesList = newdata.Data.ToList();
        StateHasChanged();
    }
    private void ChangeAddMessageVisibility()
    {
        showAddMenu = !showAddMenu;
    }
    private async void AddMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            await hubConnection.SendAsync("SendMessage", new MessageDTO() { ChatId = ChatId, Text = newMessage });
            showAddMenu = false;
        }
    }
}

