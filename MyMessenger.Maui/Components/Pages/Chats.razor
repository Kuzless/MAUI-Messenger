@page "/chats"
@using MyMessenger.Application.DTO.ChatDTOs
@using MyMessenger.Application.DTO
@using MyMessenger.Maui.Services
@using MyMessenger.Maui.Components.Pages.ParametersPages
@using BlazorPagination
@inject NavigationManager NavigationManager
@inject ChatService chatService

<h1>Chats</h1>
@if (IsLoaded)
{
    <button @onclick="OpenPopup">Parameters</button>

    <SfGrid DataSource="@ChatsList">
        <GridColumns>
            <GridColumn Field="@nameof(ChatDTO.Id)" HeaderText="Id"></GridColumn>
            <GridColumn Field="@nameof(ChatDTO.Name)" HeaderText="Name"></GridColumn>
            <GridColumn>
                <Template>
                    <button @onclick="() => GoToChat(((ChatDTO)context).Id)">Open</button>
                    <button @onclick="() => DeleteChat((ChatDTO)context)">Delete</button>
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>


    <button @onclick="ChangeAddChatVisibility">Add</button>

    @if (showAddMenu)
    {
        <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: grey; padding: 20px; border-block-color: black;">
            <label for="chatName">Chat Name:</label>
            <input type="text" id="chatName" @bind="newChatName" required />
            <div style="margin-top: 10px;">
                <button @onclick="AddChat">Save</button>
            </div>
        </div>
    }
    <BlazorPager CurrentPage="@currentPage"
                 PageCount="@numberOfPages"
                 OnPageChanged="(async x => { currentPage = x; ChangePage(); })"
                 ShowFirstLast="false"
                 ShowPageNumbers="true"
                 VisiblePages=pageSize />

    if (isWindowVisible)
    {
        <GenericParameters Columns="@Columns" CurrentPage="@CurrentPage" OnSave="@SaveChanges" OnClose="@ClosePopup"></GenericParameters>
    }
}
else
{
    <br>
    <h3>Loading...</h3>
}

@code {
    private IEnumerable<ChatDTO> ChatsList;
    private AllDataRetrievalParametersDTO CurrentPage;
    private List<string> Columns = new List<string> { "Id", "Name" };
    private bool isWindowVisible = false;
    private int numberOfPages;
    private int currentPage;
    private int pageSize;
    bool showAddMenu = false;
    string newChatName = "";
    private bool IsLoaded { get; set; } = false;

    protected override void OnInitialized()
    {
        numberOfPages = 1;
        currentPage = 1;
        pageSize = 10;
        CurrentPage = new AllDataRetrievalParametersDTO() { PageNumber = currentPage, PageSize = pageSize, Sort = new Dictionary<string, bool>() { { "Name", false } }, Subs = ""};
        GetAllChats();
        base.OnInitialized();
        IsLoaded = true;
    }
    private void ChangePage()
    {
        CurrentPage.PageNumber = currentPage;
        GetAllChats();
    }
    private async void GetAllChats()
    {
        DataForGridDTO<ChatDTO> newdata = await chatService.GetAllChats(CurrentPage);
        ChatsList = newdata.Data;
        numberOfPages = newdata.NumberOfPages;
        StateHasChanged();
    }
    private void ChangeParametersVisibility()
    {
        isWindowVisible = !isWindowVisible;
    }

    private void ChangeAddChatVisibility()
    {
        showAddMenu = !showAddMenu;
    }

    private async void AddChat()
    {
        if (!string.IsNullOrEmpty(newChatName))
        {
            await chatService.AddChat(new ChatDTO() { Name = newChatName });
            showAddMenu = false;
            GetAllChats();
        }
    }
    private async void DeleteChat(ChatDTO chat)
    {
        await chatService.DeleteChat(chat.Id);
        GetAllChats();
    }
    private void GoToChat(int id) {
        NavigationManager.NavigateTo($"/chatmessages/{id}");
    }

    // Parameters
    void SaveChanges()
    {
        GetAllChats();
    }
    void OpenPopup()
    {
        isWindowVisible = true;
    }
    void ClosePopup()
    {
        isWindowVisible = false;
    }
}
