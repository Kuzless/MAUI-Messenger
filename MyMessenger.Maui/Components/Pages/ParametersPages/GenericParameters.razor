@using MyMessenger.Maui.Models
<div class="parameters" style="position:fixed;top:0;left:0;width:100vw;height:100vh;z-index:9999;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center;">
    <div class="content" style="position:relative;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;min-width:320px;">
        <button @onclick="ClosePopup" style="position:absolute;top:1rem;right:1rem;background:none;border:none;font-size:2rem;line-height:1;color:#888;cursor:pointer;z-index:1001;">×</button>
        <div class="search-bar" style="width:100%;max-width:340px;">
            <h3 class="text-accent" style="margin-bottom:1rem;">Search</h3>
            <input type="text" @bind="CurrentPage.Subs" placeholder="Search..." style="width:100%;margin-bottom:1rem;" />
        </div>
        <h3 class="text-accent" style="margin-bottom:1rem;">Sort</h3>
        <div class="dropdown" style="width:100%;max-width:340px;margin-bottom:1rem;">
            <select @onchange="(e) => SortByColumn(e)" style="width:100%;">
                @foreach (var column in Columns)
                {
                    <option value="@column">@column</option>
                }
            </select>
        </div>
        <div class="radio-group2" style="margin-bottom:1rem;">
            <input type="radio" id="radio11" name="radioGroup2" checked="true" value="value1" @onclick="() => { SortType = false; ChangeSortType(); }" />
            <label for="radio11" style="margin-right:1rem;">Asc</label>
            <input type="radio" id="radio22" name="radioGroup2" value="value2" @onclick="() => { SortType = true; ChangeSortType(); }" />
            <label for="radio22">Desc</label>
        </div>
        <div style="display:flex;justify-content:center;gap:1rem;width:100%;max-width:340px;">
            <button class="btn-main" style="flex:1;" @onclick="SaveAndClose">Apply</button>
            <button class="btn-main" style="flex:1;" @onclick="ClosePopup">Close</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback<string> OnSave { get; set; }
    [Parameter]
    public AllDataRetrievalParametersDTO CurrentPage { get; set; }
    [Parameter]
    public List<string> Columns { get; set; }

    private bool SortType;
    private string SelectedColumn;
    private Dictionary<string, bool> Sort = new Dictionary<string, bool>();
    private string Subs;

    protected override void OnInitialized()
    {
        SortType = false;
        Sort.Add(Columns[0], SortType);
        SelectedColumn = Columns[0];
        Sort = new Dictionary<string, bool>() { { Columns[0], SortType } };
        base.OnInitialized();
    }
    private void SaveAndClose()
    {
        CurrentPage.Sort = Sort;
        OnSave.InvokeAsync();
        ClosePopup();
    }
    private void ClosePopup()
    {
        OnClose.InvokeAsync();
    }
    private void SortByColumn(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        SelectedColumn = e.Value.ToString();
        Sort.Clear();
        Sort.Add(SelectedColumn, SortType);
    }
    private void ChangeSortType()
    {
        var sortRule = Sort.First();
        Sort[sortRule.Key] = SortType;
    }
}
